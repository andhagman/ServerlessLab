service: andreas-hagman-serverlesslab
provider:
  name: aws
  runtime: nodejs8.10
  region: eu-west-1
  stage: ${opt:stage, 'dev'}
  package:
    individually: true
  environment:
    UserPoolId: eu-west-1_ZSweB3Dka
    UserPoolClientId: 55ms3jbn6403vovef2veo3n2lo
  iamRoleStatements:
    - Effect: Allow
      Action:
        - 'cognito-idp:*'
      Resource: '*'
plugins:
  - serverless-webpack
  - serverless-offline
layers:
  commonLayer:
    path: layers/common
    description: This lambda layer takes care of common
functions:
  GetTest:
    handler: src/lambdas/http/get-test.handler
    events:
      - http:
          method: GET
          path: test
    layers:
      - Ref: CommonLayerLambdaLayer
  PostTest:
    handler: src/lambdas/http/post-test.handler
    events:
      - http:
          method: POST
          path: test
  register:
    handler: src/lambdas/http/autherizer/register.handler
    events:
      - http:
          method: POST
          path: register
  confirm:
    handler: src/lambdas/http/autherizer/confirm.handler
    events:
      - http:
          method: POST
          path: confirm
  auth:
    handler: src/lambdas/http/autherizer/auth.handler
    events:
      - http:
          method: POST
          path: auth
  pre-signup:
    handler: src/lambdas/events/cognito/pre-signup.handler
    events:
      - cognitoUserPool:
          pool: ServerlessLab
          trigger: PreSignUp
resources:
  Resources:
    ApiGatewayAuthorizer:
      Type: 'AWS::ApiGateway::Authorizer'
      Properties:
        Name: ApiGatewayAuthorizer
        Type: COGNITO_USER_POOLS
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        ProviderARNs:
          - 'Fn::GetAtt':
              - CognitoUserPoolServerlessLab
              - Arn
    CognitoUserPoolServerlessLab:
      Type: 'AWS::Cognito::UserPool'
      Properties:
        UserPoolName: UserPool
        MfaConfiguration: 'OFF'
        Schema:
          - Name: email
            AttributeDataType: String
            Mutable: false
            Required: true
        Policies:
          PasswordPolicy:
            RequireLowercase: true
            RequireSymbols: false
            RequireNumbers: true
            MinimumLength: 8
            RequireUppercase: true
        AdminCreateUserConfig:
          InviteMessageTemplate:
            EmailMessage: >-
              Your Serverless Lab  username is {username} and temporary password
              is {####}.
            EmailSubject: Your temporary Serverless Lab  password
          UnusedAccountValidityDays: 7
          AllowAdminCreateUserOnly: false
    UserPoolClient:
      Type: 'AWS::Cognito::UserPoolClient'
      Properties:
        ClientName: UserPoolClient
        UserPoolId:
          Ref: CognitoUserPoolServerlessLab
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
        GenerateSecret: false
        RefreshTokenValidity: 7

    ApiGatewayRestApi:
      Properties:
        Body: ${file(templates/swagger.yml)}

Outputs:
  UserPoolId:
    Value:
      Ref: CognitoUserPoolServerlessLab
  UserPoolClientId:
    Value:
      Ref: UserPoolClient
